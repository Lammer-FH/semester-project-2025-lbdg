openapi: 3.0.0
info:
  title: Library System API
  version: 1.0.0
  description: API for managing libraries, books, bookings, ratings, and users.
servers:
  - url: http://localhost:8080/api
tags:
  - name: book
  - name: library
  - name: booking
  - name: rating
  - name: user

paths:
  /libraries/{id}/books:
    get:
      tags:
        - library
      summary: Get all books in a library
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
                  
  /libraries:
    post:
      tags:
        - library
      summary: Create a new library
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
      responses:
        '201':
          description: Library created


  /books/{id}/ratings:
    get:
      tags:
        - book
        - rating
      summary: Get ratings for a book
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of ratings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rating'

  /books:
    post:
      tags:
        - book
      summary: Create a new book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: Book created

  /books/{id}:
    put:
      tags:
        - book
      summary: Update a book
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: Book updated
    delete:
      tags:
        - book
      summary: Delete a book
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Book deleted

  /bookings:
    post:
      tags:
        - booking
      summary: Create a new booking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
      responses:
        '201':
          description: Booking created

  /bookings/{id}:
    put:
      tags:
        - booking
      summary: Update a booking
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
      responses:
        '200':
          description: Booking updated
    delete:
      tags:
        - booking
      summary: Delete a booking
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Booking deleted

  /ratings:
    post:
      tags:
        - rating
      summary: Submit a new rating
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rating'
      responses:
        '201':
          description: Rating submitted

  /ratings/{id}:
    put:
      tags:
        - rating
      summary: Edit a rating
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rating'
      responses:
        '200':
          description: Rating updated
    delete:
      tags:
        - rating
      summary: Delete a rating
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Rating deleted

  /users/{id}:
    get:
      tags:
        - user
      summary: Get user details
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: string
        library_id:
          type: string
        author:
          type: string
        title:
          type: string
        isbn:
          type: string
        image:
          type: string
          format: binary
        publisher:
          type: string
        short_description:
          type: string
        published_year:
          type: integer

    Booking:
      type: object
      properties:
        id:
          type: string
        book_id:
          type: string
        user_id:
          type: string
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date

    Rating:
      type: object
      properties:
        id:
          type: string
        book_id:
          type: string
        user_id:
          type: string
        rating:
          type: integer
          minimum: 1
          maximum: 5

    User:
      type: object
      properties:
        id:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [user, librarian]

    Library:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        address:
          type: string
